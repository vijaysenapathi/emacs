#+STARTUP: content

* Emacs Configuration 
** basic editor window settings
#+BEGIN_SRC emacs-lisp
  ;; Disable startup message
  (setq inhibit-startup-message t)

  (menu-bar-mode -1)   ; Disable menu bar
  (tool-bar-mode -1)   ; Disable tool bar
  (scroll-bar-mode -1) ; Disable scroll bar
  (tooltip-mode -1)    ; Disable tool tip
  (set-fringe-mode 10) ; Give some breathing room

  ;; Set the default size of the frame
  (add-to-list 'default-frame-alist '(left . 300))  ; 300 on the left
  (add-to-list 'default-frame-alist '(width . 100))  ; 80 columns wide
  (add-to-list 'default-frame-alist '(height . 30)) ; 24 rows high

  ;; (setq visible-bell t); Setup a visible bell
  (setq ring-bell-function 'ignore)
#+END_SRC

#+RESULTS:
: ignore

** editor base settings
#+BEGIN_SRC emacs-lisp
  ;; (global-display-line-numbers-mode t) ; Enable line numbers
  (column-number-mode t)               ; Enable column numbers in status
  (setq require-final-newline nil)     ; Prevents the editor from going out of the line limit
#+END_SRC

#+RESULTS:

** initialise packages
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

#+RESULTS:

** setting the theme
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'catppuccin-theme)
    (package-install 'catppuccin-theme))
  (load-theme 'catppuccin :no-confirm)

  ;; Setting the catpuccin flavour
  ;; flavours: 'latte, 'frappe, 'macchiato, 'mocha
  (setq catppuccin-flavor 'latte)
  (catppuccin-reload)
#+END_SRC

#+RESULTS:
: t

** backup files and autosave
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC

#+RESULTS:

** better scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100) ; Avoid jumping when scrolling
#+END_SRC

#+RESULTS:
: 0

** font settings
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      :font "JetBrainsMono Nerd Font"
                      :height 150
                      )
#+END_SRC

#+RESULTS:

** evil-mode
#+BEGIN_SRC emacs-lisp
  ;; Install evil 		       ;;
  (unless (package-installed-p 'evil) ;;
    (package-install 'evil))	       ;;
  ;; Enable evil		       ;;
  (require 'evil)		       ;;
  (evil-mode 1)		       ;;
  (evil-version)		       ;;
#+END_SRC

#+RESULTS:
: Evil version 1.15.0
** space keys
#+BEGIN_SRC emacs-lisp
  (define-prefix-command 'my-prefix-keymap)
  (define-key global-map (kbd "<space> o") 'my-prefix-keymap)
  (define-key my-prefix-keymap (kbd "o") 'open-line)
#+END_SRC

#+RESULTS:
: open-line

** which-key
#+BEGIN_SRC emacs-lisp
  ;; Install which-key
  (unless (package-installed-p 'which-key)
    (package-install 'which-key))

  ;; Enable which-key
  (require 'which-key)
  (which-key-mode)
#+END_SRC

#+RESULTS:
: which-key

** org-mode
*** appearance
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'org-superstar)
    (package-install 'org-superstar))

  (require 'org-superstar)
  ;; adding hooks for both indent and bullets mode
  (add-hook 'org-mode-hook (lambda ()
                             (org-indent-mode 1)
                             (org-superstar-mode 1)
                             (visual-line-mode 1)
                             ;; (setq mode-line-format nil)
                             (setq left-margin-width 4)
                             (setq right-margin-width 4)
                             ))

  (setq org-superstar-headline-bullets-list
        '("" "" "" "" "" ""))
  (setq org-superstar-item-bullet-alist
        '((?* . ?*)
          (?+ . ?)
          (?- . ?)))
  (setq org-superstar-special-todo-items t)
  (setq org-superstar-todo-bullet-alist
    '(("TODO" . ?)
      ("DONE" . ?)))
  ; (setq org-superstar-special-todo-items 'hide)
#+END_SRC

#+RESULTS:
: ((TODO . 59036) (DONE . 59036))

#+RESULTS:
: 
*** org-journal
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'org-journal)
    (package-install 'org-journal))

  (require 'org-journal)
#+END_SRC

*** org-download
#+BEGIN_SRC emacs-lisp
  ;; This package allows us to drag drop images
  (unless (package-installed-p 'org-download)
    (package-install 'org-download))

  (require 'org-download)
#+END_SRC

#+RESULTS:
: org-download

*** org-agenda  
#+BEGIN_SRC emacs-lisp
  ;; Setting the directory where agenda files are stored
  ;; (setq org-agenda-files '(find-file (expand-file-name "~/Projects/Planner/")))
  (setq org-agenda-files '("~/Projects/Planner/test.org"))
#+END_SRC
asdas
sdads
** latex support
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'auctex)
    (package-install 'auctex))

  (require 'auctex)
#+END_SRC

** open config on startup
#+BEGIN_SRC emacs-lisp
  (find-file (expand-file-name "~/.config/emacs/config.org"))
#+END_SRC

#+RESULTS:
: t
